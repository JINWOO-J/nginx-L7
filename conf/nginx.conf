user  www-data;
worker_processes  8;

error_log  /var/log/nginx/error.log info;


events {
    worker_connections  8192;
    use epoll;
}



http {
# dyups_upstream_conf  conf/upstream.conf;
    include conf/upstream.conf;
#    log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $host - $server_name to: $upstream_addr: $request upstream_response_time $upstream_response_time msec $msec request_time $request_time $http_user_agent "$request_body" "$upstream_cache_status" "$request" "$hostname" set_cookie=$http_cookie "$gzip_ratio" "$status"';
    log_format upstreamlog '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" "$gzip_ratio"'
                            '"$server_name" to: "$upstream_addr": "$upstream_response_time" "$msec" "$request_time"';

    access_log /var/log/nginx/access.log upstreamlog;
    lua_package_path "/etc/nginx/conf/resty/upstream/?.lua;/etc/nginx/conf/?.lua;/etc/nginx/conf/lua-resty-redis/lib/?.lua;
                    /etc/nginx/conf/lua/src/lib/plugins/?.lua;
                    /etc/nginx/conf/lua/src/lib/?.lua;/etc/nginx/conf/lua/conf/?.lua;
                    /etc/nginx/conf/lua/src/bin/?.lua;/usr/lib64/lua/5.1/luarocks/?.lua;
                    /usr/local/lib/luarocks/rocks/?/?.lua;;";

    lua_shared_dict www_upstream_dict 10m;
    lua_shared_dict worker_pid_dict 1m;
    lua_shared_dict upstream_status_dict 5m;

    geo $remote_addr $allowed {
        default 0;
        192.168.0.0/16 1;
        100.100.0.0/16 1;
    }

    #lua_package_path    "/etc/nginx/conf/?.lua;;";
    lua_shared_dict     log_dict    20M;
    lua_shared_dict upstream_curr_requests 10M;
    resolver 164.124.101.2;


    include       mime.types;
    vhost_traffic_status_zone;
    default_type  application/octet-stream;

    map $upstream_addr $upstream_hostname {
        172.17.0.12:80 hostname1;
        172.17.0.13:80 hostname2;
    }

    lua_shared_dict healthcheck 1m;
    lua_shared_dict my_upstream 1m;

    lua_socket_log_errors off;
    proxy_headers_hash_bucket_size 512;

    proxy_cache_path /usr/local/nginx/tmp levels=1:2 keys_zone=cachefile:10m max_size=1000m inactive=60m;

    # General Option
    sendfile        on;
    server_tokens   off;
    keepalive_timeout  60 5;
    keepalive_requests 10;
    ## TCP options
    tcp_nodelay on;
    tcp_nopush  off;

    gzip on;
    gzip_comp_level 2;
    gzip_disable "msie6";
    gzip_proxied any;
    gzip_types application/javascript application/json application/vnd.ms-fontobject application/x-font-ttf image/svg+xml text/css text/plain text/xml image/jpeg application/x-javascript;
    gzip_vary on;

    #init_by_lua_file '/etc/nginx/conf/upstream_init.lua';
    init_worker_by_lua_file "/etc/nginx/conf/upstream_worker_init.lua";

    server {
        listen   443 ssl;
        server_name localhost;
        # ssl_certificate ssl/jeju.com_nginx.pem;
        # ssl_certificate_key ssl/jeju.com_key_nopass.pem;
        ###
        # ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_verify_client off;
        #ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;
        #ssl_ciphers RC4:HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        proxy_ssl_session_reuse off;
        ###


        location / {
            fastcgi_buffer_size 16K;
            #fastcgi_buffers 256 4k;
            fastcgi_buffers 256 32k;
            fastcgi_max_temp_file_size 0;

            proxy_pass https://www_upstream_443;
            #proxy_set_header Host           $host;
            proxy_set_header      X-NginX-Proxy true;
            proxy_set_header      Host $http_host;
            proxy_set_header      X-Real-IP  $remote_addr;
            proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
            #proxy_set_header      X-Forwarded-Proto https;
            proxy_set_header        X-Forwarded-Proto $scheme;
            #proxy_redirect        http://$host/ https://$host/;
            #proxy_redirect        http://hostname/ https://$host/;
        }

    }



    server {

        listen       80;
        server_name  localhost;
        fastcgi_buffer_size 16K;
        #fastcgi_buffers 256 4k;
        fastcgi_buffers 8 32k;
        fastcgi_max_temp_file_size 0;

        location = /pools {
            allow 127.0.0.1;
            allow 172.17.0.0/16;
            allow 192.168.99.0/16;

            content_by_lua '
                local cjson = require("cjson")
                local pools, err = api:get_pools()
                if not pools then
                    ngx.print(cjson.encode(err))
                    ngx.status = 200
                else
                    ngx.print(cjson.encode(pools))
                end
            ';
        }
        location ~ /status_page($|/) {

            allow 127.0.0.1;

            allow 172.17.0.1;
            allow 192.168.99.0/24;
            allow 100.100.100.0/24;
            deny all;
            default_type "text/html";
            alias /etc/nginx/conf/status_page.html;
            access_log   off;
	   }

        location ~ /nginx_status($|/) {
            allow 127.0.0.1;
            allow 172.17.42.1;
            allow 61.106.236.253;
            allow 192.168.99.0/24;
            allow 59.6.152.75;
            deny all;
            stub_status on;
            access_log   off;
        }

        location / {
             proxy_pass http://www_upstream;
             proxy_redirect      off;
             proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
             proxy_set_header   X-Forwarded-Proto $scheme;
             proxy_set_header   Host              $http_host;
             proxy_set_header   X-Real-IP         $upstream_response_time;
             proxy_set_header   CLIENT_IP         $remote_addr;

             proxy_set_header   Origin $http_origin;
             proxy_max_temp_file_size 1924m;
             proxy_read_timeout 100;
        }
        error_page   500 502 503 504  /50x.html;

        location = /upstreamcontrol {
            allow 127.0.0.1;
            allow 172.17.42.1;
            allow 59.6.152.75;
            allow 61.106.236.253;
            allow 192.168.99.0/24;
            allow 100.100.100.0/24;
            deny all;
            default_type text/html;
            content_by_lua_file /etc/nginx/conf/upstreamcontrol.lua;
        }

    #       curl -i http://127.0.0.1/upstreamstatus
        location = /upstreamstatus {
            lua_code_cache off;
            allow 127.0.0.1;
            allow 172.17.42.1;
            allow 59.6.152.75;
            allow 61.106.236.253;
            allow 192.168.99.0/24;
            allow 100.100.100.0/24;
            deny all;
            default_type text/html;
            content_by_lua_file /etc/nginx/conf/upstreamstatus.lua;
        }

        location = /upstream_json{
            lua_code_cache off;
            allow 127.0.0.1;
            allow 172.17.42.1;
            allow 59.6.152.75;
            allow 61.106.236.253;
            allow 121.130.24.94;
            allow 192.168.99.0/24;
            allow 172.17.0.0/16;
            allow 100.100.100.0/24;
            deny all;
            default_type application/json;
            content_by_lua_file /etc/nginx/conf/upstream_json.lua;
        }


        location = /upstreams {
            allow 127.0.0.1;
            allow 172.17.42.1;
            allow 59.6.152.75;
            allow 61.106.236.253;
            allow 121.130.24.94;
            allow 192.168.99.0/24;
            allow 100.100.100.0/24;
            deny all;

            default_type text/html;
            lua_code_cache off;
            content_by_lua_file /etc/nginx/conf/upstream_jjw.lua;
        }
#      location /admin {
# #            allow 127.0.0.1; # Only allow local connections
#  #           deny all;
#             content_by_lua '
#                     ngx.say("Hello , jinwoo");
#                     ngx.req.read_body()
#                     local body_data = ngx.req.get_body_data()
#                     ngx.say(body_data)
#                     local cjson = require "cjson"
#                     local new_upstream = cjson.decode(body_data)
#                     -- ngx.log(ngx.STDERR, "LUA_LOG: ", new_upstream)
#                     local upstream_curr_requests = ngx.shared.upstream_curr_requests
#                     local upstream_curr_requests_keys = upstream_curr_requests:get_keys(10000)
#                     for upstream in pairs(new_upstream) do
#                             ngx.log(ngx.STDERR, "LUA_LOG: ", upstream )
#                             upstream_curr_requests:add(upstream, 0)
#                     end
#             ';
#     }

        location /vtstatus {

            allow 127.0.0.1;
            allow 172.17.42.1;
            allow 61.106.236.253;
            allow 61.106.236.243;
            allow 121.130.24.94;
            allow 59.6.152.75;
            allow 100.100.100.0/24;

            deny all;
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
        }

        location = /50x.html {
            root   html;
        }

        location /status {
            allow 127.0.0.1;
            allow 192.168.99.0/16;
            allow 100.100.100.0/24;
            deny all;
            check_status;
        }
    }
}
daemon off;
